## **1. What is `fetch` in JavaScript?**

* `fetch()` is a **built-in browser API** for making network requests (HTTP/HTTPS) to fetch resources.
* It is **Promise-based** (unlike older `XMLHttpRequest`).
* Used for GET, POST, PUT, DELETE, and other HTTP methods.
* Can handle various response types: JSON, text, Blob, FormData, streams, etc.

**Syntax:**

```javascript
fetch(resource, options);
```

* `resource`: URL (string) or a `Request` object.
* `options` (optional): object with configuration (method, headers, body, etc.).

Returns a **Promise** that resolves to a `Response` object.

---

## **2. Basic Usage**

Default is a **GET request**:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json()) // convert response body to JSON
  .then(data => console.log(data))
  .catch(error => console.error('Fetch Error:', error));
```

### **Key points:**

* `fetch` only **rejects** the Promise on **network errors** (like no connection).
* HTTP errors (404, 500) **don’t cause rejection**; you must handle them manually.

Example:

```javascript
fetch('https://api.example.com/data')
  .then(response => {
    if (!response.ok) {  // response.ok = status in range 200-299
      throw new Error(`HTTP Error: ${response.status}`);
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(err => console.error(err));
```

---

## **3. `Response` Object**

When you call `fetch`, the resolved value is a `Response` object.

Important properties:

* `ok`: Boolean (true for 200–299)
* `status`: HTTP status code (e.g., 200, 404)
* `statusText`: Status description
* `headers`: A `Headers` object for accessing headers
* `url`: Final URL after redirects

Methods (consume the response body):

* `response.text()`
* `response.json()`
* `response.blob()`
* `response.arrayBuffer()`
* `response.formData()`

---

## **4. Making POST Requests**

You can send data using `POST` with headers and body:

```javascript
fetch('https://api.example.com/users', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer token'
  },
  body: JSON.stringify({ name: 'John', age: 30 })
})
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));
```

### Notes:

* `Content-Type` must match the type of the body (e.g., JSON, FormData, etc.).
* When sending `FormData`, **do not manually set `Content-Type`**; the browser will set it automatically.

---

## **5. Handling Different Response Types**

`fetch` can retrieve:

1. **Text**

```javascript
fetch('/file.txt').then(res => res.text()).then(console.log);
```

2. **Blob (for files/images)**

```javascript
fetch('/image.png').then(res => res.blob()).then(blob => {
  const img = URL.createObjectURL(blob);
  document.querySelector('img').src = img;
});
```

3. **ArrayBuffer (binary data)**

```javascript
fetch('/audio.mp3').then(res => res.arrayBuffer()).then(buffer => {
  console.log(buffer.byteLength);
});
```

---

## **6. Error Handling**

By default, fetch won’t reject on HTTP errors:

```javascript
async function fetchData() {
  try {
    const res = await fetch('https://api.example.com/data');
    if (!res.ok) throw new Error(`Error: ${res.status}`);
    const data = await res.json();
    console.log(data);
  } catch (error) {
    console.error('Fetch failed:', error);
  }
}
```

---

## **7. Aborting Requests**

Using `AbortController`:

```javascript
const controller = new AbortController();
const { signal } = controller;

fetch('https://api.example.com/slow', { signal })
  .then(res => res.json())
  .then(console.log)
  .catch(err => {
    if (err.name === 'AbortError') {
      console.log('Request aborted');
    } else {
      console.error(err);
    }
  });

// Cancel request after 2 seconds
setTimeout(() => controller.abort(), 2000);
```

---

## **8. Request Timeout Helper**

Fetch doesn’t have a built-in timeout, but you can simulate:

```javascript
function fetchWithTimeout(url, ms) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), ms);

  return fetch(url, { signal: controller.signal })
    .finally(() => clearTimeout(id));
}

fetchWithTimeout('/api', 3000)
  .then(res => res.json())
  .then(console.log)
  .catch(err => console.error('Timeout or error:', err));
```

---

## **9. Advanced Features**

### **Streaming Responses (ReadableStream)**

You can process responses **incrementally** without waiting for the full body:

```javascript
fetch('/large-file').then(async res => {
  const reader = res.body.getReader();
  const decoder = new TextDecoder();
  let result = '';

  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    result += decoder.decode(value, { stream: true });
  }

  console.log('Full data:', result);
});
```

### **Uploading Files (FormData)**

```javascript
const formData = new FormData();
formData.append('file', fileInput.files[0]);

fetch('/upload', {
  method: 'POST',
  body: formData
});
```

---

## **10. Comparison with `XMLHttpRequest`**

* `fetch` is Promise-based (simpler to use).
* Better support for streaming and `AbortController`.
* Does not support progress tracking out-of-the-box (need to use `ReadableStream`).
* Cannot directly set some things like `withCredentials` (CORS must be configured properly).

---

## **11. Common Pitfalls**

1. Forgetting to check `response.ok`.
2. Double `.json()` calls (body can be read only once).
3. Forgetting CORS headers on server (causes errors).
4. Using fetch for very old browsers (need polyfill).

---

## **12. Best Practices**

* Always handle errors (network + HTTP).
* Use `AbortController` for timeouts/cancellations.
* Prefer `async/await` for readability.
* Centralize fetch logic in a helper function (for DRY code).

Example helper:

```javascript
async function apiRequest(url, options = {}) {
  const res = await fetch(url, options);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

apiRequest('/api/data').then(console.log).catch(console.error);
```


